#!/usr/bin/env bash
set -e
set -euo pipefail

encode_name() {
  local name="$1"
  local result="test_"
  local hex_code

  if [[ ! "$name" =~ [^[:alnum:]\ _-] ]]; then
    name="${name//_/-5f}"
    name="${name//-/-2d}"
    name="${name// /_}"
    result+="$name"
  else
    local length="${#name}"
    local char i

    for ((i=0; i<length; i++)); do
      char="${name:$i:1}"
      if [ "$char" = " " ]; then
        result+="_"
      elif [[ "$char" =~ [[:alnum:]] ]]; then
        result+="$char"
      else
        printf -v 'hex_code' -- "-%02x" \'"$char"
        result+="$hex_code"
      fi
    done
  fi

  printf -v "$2" '%s' "$result"
}

tests=()
index=0

while IFS= read -r line; do
  line="${line//$'\r'}"
  let index+=1
  if [[ "$line" =~ $BATS_TEST_PATTERN ]]; then
    name="${BASH_REMATCH[1]#[\'\"]}"
    name="${name%[\'\"]}"
    body="${BASH_REMATCH[2]}"
    encode_name "$name" 'encoded_name'
    tests["${#tests[@]}"]="$encoded_name"
    echo "${encoded_name}() { bats_test_begin \"${name}\" ${index}; ${body}"
  elif [[ "$line" =~ $BATS_INCLUDE_PATTERN ]]; then
    file_to_include="${BASH_REMATCH[1]}"
    file_to_include=$(eval "echo \"${BASH_REMATCH[1]}\"")
    if [[ -f "$file_to_include" ]]; then
      printf '%s\n\' "$(<$file_to_include)"
    elif [[ -d "$file_to_include" ]]; then
      echo "bats: cannot include a directory: $file_to_include" >&3
      exit 1
    else
      echo "bats: file to include does not exist: $file_to_include" >&3
      exit 1
    fi
  else
    printf "%s\n" "$line"
  fi
done

for test_name in "${tests[@]}"; do
  echo "bats_test_function ${test_name}"
done
